{"version":3,"sources":["../../../src/learning-header/data/api.test.js"],"names":["getConfig","getAuthenticatedHttpClient","getCourseLogoOrg","initializeMockApp","jest","mock","CustomError","httpErrorStatus","customAttributes","Error","describe","beforeEach","window","location","mockReset","it","URL","BASE_URL","mockReturnValue","get","Promise","resolve","data","logo","logoOrg","expect","toBe","toBeNull","customError","rejects","toThrow"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,SAAT,QAA0B,wBAA1B;AACA,SAASC,0BAAT,QAA2C,6BAA3C;AACA,OAAOC,gBAAP,MAA6B,OAA7B;AACA,SAASC,iBAAT,QAAkC,iBAAlC;AAEAC,IAAI,CAACC,IAAL,CAAU,6BAAV;;IAEMC,W;;;;;AACJ,uBAAYC,eAAZ,EAA6B;AAAA;;AAAA;;AAC3B;AACA,UAAKC,gBAAL,GAAwB;AACtBD,MAAAA,eAAe,EAAfA;AADsB,KAAxB;AAF2B;AAK5B;;;iCANuBE,K;;AAS1BC,QAAQ,CAAC,kBAAD,EAAqB,YAAM;AACjCC,EAAAA,UAAU,uEAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEHR,iBAAiB,EAFd;;AAAA;AAGT,mBAAOS,MAAM,CAACC,QAAd;AACAZ,YAAAA,0BAA0B,CAACa,SAA3B;;AAJS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAD,GAAV;AAOAC,EAAAA,EAAE,CAAC,2DAAD,uEAA8D;AAAA;AAAA;AAAA;AAAA;AAAA;AAC9DH,YAAAA,MAAM,CAACC,QAAP,GAAkB,IAAIG,GAAJ,WAAWhB,SAAS,GAAGiB,QAAvB,2DAAlB;AACAhB,YAAAA,0BAA0B,CAACiB,eAA3B,CAA2C;AACzCC,cAAAA,GAAG;AAAA,mFAAE;AAAA;AAAA;AAAA;AAAA;AAAA,4DAAYC,OAAO,CAACC,OAAR,CAAgB;AAC/BC,4BAAAA,IAAI,EAAE;AACJC,8BAAAA,IAAI,EAAE;AADF;AADyB,2BAAhB,CAAZ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AADsC,aAA3C;AAF8D;AAAA,mBASxCrB,gBAAgB,EATwB;;AAAA;AASxDsB,YAAAA,OATwD;AAU9DC,YAAAA,MAAM,CAACD,OAAD,CAAN,CAAgBE,IAAhB,CAAqB,8BAArB;;AAV8D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA9D,GAAF;AAaAX,EAAAA,EAAE,CAAC,4DAAD,uEAA+D;AAAA;AAAA;AAAA;AAAA;AAAA;AAC/DH,YAAAA,MAAM,CAACC,QAAP,GAAkB,IAAIG,GAAJ,WAAWhB,SAAS,GAAGiB,QAAvB,kEAAlB;AACAhB,YAAAA,0BAA0B,CAACiB,eAA3B,CAA2C;AACzCC,cAAAA,GAAG;AAAA,oFAAE;AAAA;AAAA;AAAA;AAAA;AAAA,gCACG,IAAIb,WAAJ,CAAgB,GAAhB,CADH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AADsC,aAA3C;AAF+D;AAAA,mBAOzCJ,gBAAgB,EAPyB;;AAAA;AAOzDsB,YAAAA,OAPyD;AAQ/DC,YAAAA,MAAM,CAACD,OAAD,CAAN,CAAgBG,QAAhB;;AAR+D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA/D,GAAF;AAWAZ,EAAAA,EAAE,CAAC,uDAAD,uEAA0D;AAAA;AAAA;AAAA;AAAA;AAAA;AACpDa,YAAAA,WADoD,GACtC,IAAItB,WAAJ,CAAgB,GAAhB,CADsC;AAE1DM,YAAAA,MAAM,CAACC,QAAP,GAAkB,IAAIG,GAAJ,WAAWhB,SAAS,GAAGiB,QAAvB,2DAAlB;AACAhB,YAAAA,0BAA0B,CAACiB,eAA3B,CAA2C;AACzCC,cAAAA,GAAG;AAAA,oFAAE;AAAA;AAAA;AAAA;AAAA;AAAA,gCACGS,WADH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AADsC,aAA3C;AAH0D;AAAA,mBAQpDH,MAAM,CAACvB,gBAAgB,EAAjB,CAAN,CAA2B2B,OAA3B,CAAmCC,OAAnC,CAA2CF,WAA3C,CARoD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA1D,GAAF;AAUD,CA1CO,CAAR","sourcesContent":["import { getConfig } from '@edx/frontend-platform';\nimport { getAuthenticatedHttpClient } from '@edx/frontend-platform/auth';\nimport getCourseLogoOrg from './api';\nimport { initializeMockApp } from '../../setupTest';\n\njest.mock('@edx/frontend-platform/auth');\n\nclass CustomError extends Error {\n  constructor(httpErrorStatus) {\n    super();\n    this.customAttributes = {\n      httpErrorStatus,\n    };\n  }\n}\n\ndescribe('getCourseLogoOrg', () => {\n  beforeEach(async () => {\n    // We need to mock AuthService to implicitly use `getAuthenticatedHttpClient` within `AppContext.Provider`.\n    await initializeMockApp();\n    delete window.location;\n    getAuthenticatedHttpClient.mockReset();\n  });\n\n  it('should return the organization logo when the URL is valid', async () => {\n    window.location = new URL(`${getConfig().BASE_URL}/learning/course/course-v1:edX+DemoX+Demo_Course/home`);\n    getAuthenticatedHttpClient.mockReturnValue({\n      get: async () => Promise.resolve({\n        data: {\n          logo: 'https://example.com/logo.svg',\n        },\n      }),\n    });\n    const logoOrg = await getCourseLogoOrg();\n    expect(logoOrg).toBe('https://example.com/logo.svg');\n  });\n\n  it('should return null when the organization logo is not found', async () => {\n    window.location = new URL(`${getConfig().BASE_URL}/learning/course/course-v1:edX+DemoX+Nonexistent_Course/home`);\n    getAuthenticatedHttpClient.mockReturnValue({\n      get: async () => {\n        throw new CustomError(404);\n      },\n    });\n    const logoOrg = await getCourseLogoOrg();\n    expect(logoOrg).toBeNull();\n  });\n\n  it('should throw an error when an unexpected error occurs', async () => {\n    const customError = new CustomError(500);\n    window.location = new URL(`${getConfig().BASE_URL}/learning/course/course-v1:edX+DemoX+Demo_Course/home`);\n    getAuthenticatedHttpClient.mockReturnValue({\n      get: async () => {\n        throw customError;\n      },\n    });\n    await expect(getCourseLogoOrg()).rejects.toThrow(customError);\n  });\n});\n"],"file":"api.test.js"}